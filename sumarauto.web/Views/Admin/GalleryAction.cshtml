@model Model.Gallery
@{
    ViewBag.Title = "GalleryAction";
    Layout = "~/Views/Shared/_AdminLayoutPage.cshtml";

}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/dropzone.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/dropzone.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.14.0-beta2/css/bootstrap-select.min.css">
<style>
    .dropzone .dz-preview .dz-remove {
        text-decoration-line: underline;
    }

    .new-optionclass {
        display: none;
        width: 100%;
        padding: 5px;
        margin-top: 10px;
    }

    .dz-remove {
        width: 100%;
        background: transparent;
        color: var(--primary);
    }

    .dropzone .dz-preview .dz-image img {
        width: 100%;
    }

    .dropzone {
        border: dashed #dadde1 !important;
    }

        .dropzone .dz-preview .dz-image {
            width: 180px !important;
        }
</style>

<div class="product-container py-2">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-12 d-flex justify-content-between align-items-baseline">
            <!-- Page header -->
            <div class="mb-4">
                <h4 class="mb-0">@(Model != null && Model.Id > 0 ? "Edit Gallery" : "Add - New Gallery")</h4>
            </div>
            <div>
                <p class="m-0">
                    <a class="text-danger" href="/admin/Gallery">Back to List</a>
                </p>
            </div>
        </div>
    </div>
    <div>
        <!-- row -->
        <form id="Create">
            <input type="text" name="Id" id="Id" value="@Model.Id" hidden />
            <div class="row">
                <div class="col-lg-10 col-12">
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="mb-3">
                                <!-- heading -->
                                <div class="d-flex justify-content-between mb-1">
                                    <h6 class="mb-1">Title</h6>
                                </div>
                                <!-- input -->
                                <input type="text" value="@Model.Title" name="Title" id="Title" class="form-control" placeholder="Enter Title" required>
                            </div>
                            <div>
                                <!-- heading -->
                                <div class="d-flex justify-content-between mb-1">
                                    <h6 class="mb-1">Gallery<span class="mx-3 text-danger-emphasis" id="img-size-desc"> </span></h6>
                                </div>
                                <!-- input -->
                                @*<div id="dropzone" class="dropzone border-dashed rounded-2"></div>*@
                                <div action="#" class="d-block dropzone border-dashed rounded-2" id="myDropzone">
                                    <div class="fallback">
                                        <input name="file" type="file" multiple />
                                    </div>
                                </div>
                            </div>
                            <div class="mt-4">
                                @if (Model.Id > 0)
                                {
                                    <button id="EditBtn" type="button" class="btn btn-primary w-100 p-2">
                                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                                        Save
                                    </button>
                                }
                                else
                                {
                                    <button id="CreateBtn" type="button" class="btn btn-primary w-100 p-2">
                                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                                        Save
                                    </button>
                                }
                            </div>

                        </div>

                    </div>
                </div>
            </div>
        </form>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.14.0-beta2/js/bootstrap-select.min.js"></script>
<script>
    //DropZone Image Editor
    const uploadedFiles = [];
    Dropzone.autoDiscover = false;
    const existingImages = @Html.Raw(Json.Encode(ViewBag.GalleryImgs));
    const DefaultImage = @Html.Raw(Json.Encode(ViewBag.DefaultImg));
    const myDropzone = new Dropzone("#myDropzone", {
        url: null,
        paramName: "Files",
        maxFilesize: 75,
        maxFiles: 75,
        acceptedFiles: "image/*",
        init: function () {
            let totalSize = 0;
            let fileCount = 0;
            let alertShown = false;
            if (existingImages != null && existingImages.length > 0) {
                existingImages.forEach(existingImage => {
                    let checkedStatus =  existingImage == DefaultImage ? 'checked' : "";
                    const mockFile = {
                        name: existingImage,
                        size: 0, // Set size to 0 since we are not uploading these images
                        dataURL: existingImage, // Assuming Image property contains the URL of the image
                        mock: true
                    };
                    this.emit("addedfile", mockFile);
                    this.emit("thumbnail", mockFile, existingImage);
                    this.emit("success", mockFile);

                    // Add Delete Button
                    const cancelButton = Dropzone.createElement("<button class='dz-remove' data-dz-remove>Delete</button>");
                    cancelButton.addEventListener("click", function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        Swal.fire({
                            title: 'Are you sure?',
                            text: 'Once deleted, you will not be able to recover this image!',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, delete it!',
                        }).then((result) => {
                            if (result.isConfirmed) {
                                RemoveImgeFromServer(existingImage);
                                myDropzone.removeFile(mockFile);
                            }
                        });
                    });
                    mockFile.previewElement.appendChild(cancelButton);

                    // Add Checkbox for Default Image
                    const checkboxContainer = Dropzone.createElement(`<div class='default-checkbox-container text-center'><input name='radio' type='radio' class='default-checkbox' data-id="${existingImage}" ${checkedStatus} /><label> Set as default</label></div>`);
                    mockFile.previewElement.appendChild(checkboxContainer);
                });
            }

            this.on("addedfile", function (file) {
                if (totalSize + file.size > this.options.maxFilesize * 1024 * 1024) {
                    this.removeFile(file);
                    if (!alertShown) {
                        alert("Total file size exceeds the limit of " + this.options.maxFilesize + "MB.");
                        alertShown = true;
                    }
                    return;
                }
                if (fileCount >= this.options.maxFiles) {
                    this.removeFile(file);
                    if (!alertShown) {
                        alert("You can only upload a maximum of " + this.options.maxFiles + " files.");
                        alertShown = true;
                    }
                    return;
                }
                totalSize += file.size;
                fileCount++;
            });

            this.on("success", function (file) {
                uploadedFiles.push({ file });
            });

            this.on("removedfile", function (file) {
                const fileIndex = uploadedFiles.findIndex(item => item.file === file);
                if (fileIndex !== -1) {
                    const removedFile = uploadedFiles.splice(fileIndex, 1)[0];
                    totalSize -= removedFile.file.size;
                    fileCount--;
                }
            });

            this.on("error", function (file, errorMessage) {
                console.error(errorMessage);
            });

            this.on("thumbnail", function (file, dataUrl) {
                const cancelLink = Dropzone.createElement("<a class='dz-remove' href='javascript:undefined;' data-dz-remove>Cancel</a>");
                const drfault = Dropzone.createElement(`<div class="default-checkbox-container text-center">
                    <input type="radio" name="default" class="default-checkbox" data-id="${file.name}" />
                    <label>Set as default</label>
                </div>`);
                file.previewElement.appendChild(cancelLink);
                file.previewElement.appendChild(drfault);
                cancelLink.addEventListener("click", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    myDropzone.removeFile(file);
                });
            });
        },
    });
    function RemoveImgeFromServer(image) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteGalleryImg", "Image")',
            data: {
                img: image,
            },
        })
        .done(function (response) {
            if (response.Success == true) {
            }
            else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: response.Message,
                })
            }
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            if (XMLHttpRequest.status === 413) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Maximum request length exceeded. Please upload smaller images, less then 12MB.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Oops! The image could not be saved on the server.',
                });
            }
        });
    }
    //Action Btn
    const CreateBtn = document.getElementById("CreateBtn");
    const EditBtn = document.getElementById("EditBtn");
    if (CreateBtn) {
    CreateBtn.addEventListener("click", function () {
        const spinnerborder = document.querySelector(".spinner-border");
        spinnerborder.classList.remove("d-none");
        CreateBtn.setAttribute("disabled", true);
        var titleVal = $("#Title").val();

        const defaultChecks = document.querySelectorAll(".default-checkbox");
        let selectedDefault = "";
        const selected = Array.from(defaultChecks).find(checkbox => checkbox.checked);
        if (selected) {
            const dataId = selected.getAttribute('data-id');
            selectedDefault = dataId;
        } else {
            console.log("No image is selected as default.");
        }

        if (uploadedFiles.length > 0) {
            const formDataForMultipleImage = new FormData(document.getElementById('Create'));
            for (const uploadedFile of uploadedFiles) {
                formDataForMultipleImage.append('Files', uploadedFile.file);
            }
            formDataForMultipleImage.append("Title", titleVal);
            formDataForMultipleImage.append("SelectedDefault", selectedDefault);
            $.ajax({
                type: 'POST',
                url: '@Url.Action("UploadGalleryImages", "Image")',
                data: formDataForMultipleImage,
                dataType: 'json',
                contentType: false,
                processData: false
            })
                .done(function (response) {
                    if (response.Success == true) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Gallery Data Saved',
                            text: 'Your gallery data have been successfully saved.',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.reload();
                            }
                        });
                    }
                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: response.Message,
                        })
                    }
                })
                .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                    if (XMLHttpRequest.status === 413) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Maximum request length exceeded. Please upload smaller images, less then 12MB.',
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Oops! The image could not be saved on the server.',
                        });
                    }
                });
        }
        else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Select images to submit.',
            });
        }
        spinnerborder.classList.add("d-none");
        CreateBtn.removeAttribute("disabled");
    });
    }
    if (EditBtn) {
        EditBtn.addEventListener("click", function () {
        const spinnerborder = document.querySelector(".spinner-border");
        spinnerborder.classList.remove("d-none");
        EditBtn.setAttribute("disabled", true);
        var titleVal = $("#Title").val();
            const formDataForMultipleImage = new FormData(document.getElementById('Create'));
            for (const uploadedFile of uploadedFiles) {
                formDataForMultipleImage.append('Files', uploadedFile.file);
            }
            const defaultChecks = document.querySelectorAll(".default-checkbox");
            let selectedDefault = "";
            const selected = Array.from(defaultChecks).find(checkbox => checkbox.checked);
            if (selected) {
                const dataId = selected.getAttribute('data-id');
                selectedDefault = dataId;
            } else {
                console.log("No image is selected as default.");
            }
            formDataForMultipleImage.append("Title", titleVal);
            formDataForMultipleImage.append("SelectedDefault", selectedDefault);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("UploadGalleryImages", "Image")',
                data: formDataForMultipleImage,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.Success === true) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Gallery Data Saved',
                            text: 'Your data have been successfully edited.',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.reload();
                            }
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: response.Message,
                        });
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    if (XMLHttpRequest.status === 413) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Maximum request length exceeded. Please upload smaller images, less than 12MB.',
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Oops! The image could not be saved on the server.',
                        });
                    }
                },
                complete: function () {
                    // This code runs regardless of success or failure
                    spinnerborder.classList.add("d-none");
                    EditBtn.removeAttribute("disabled");
                }
            })
    });
    }
</script>