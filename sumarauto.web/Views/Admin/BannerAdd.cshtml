@using DataModel; 
@model Model.Banner
@{
    ViewBag.Title = "BannerAdd";
    Layout = "~/Views/Shared/_AdminLayoutPage.cshtml";
    var imageurl = "/Content/Images/DefaultImage.jpg";
}
<style>
    #imageUpload {
        padding-bottom: 0 !important;
    }
    .form-group{
       margin-bottom:20px;
    }
        .form-group label {
            margin-bottom: 7px;
        }
</style>
<div class="adminpage-head p-3">
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h5>Add Banner</h5>
            <div>
                @Html.ActionLink("Back to List", "BannerList")
            </div>
        </div>
        <div class="card-body">

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @*<input type="text" name="Type" value="Home" readonly />*@
                            @foreach (BannerType val in Enum.GetValues(typeof(BannerType)))
                            {
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="Type" id="inlineRadio1" value="@val" @(val.ToString() == "Home" ? "checked" : "")>
                                    <label class="form-check-label" for="inlineRadio1">@val</label>
                                </div>
                            }
                            @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Heading, htmlAttributes: new { @class = "control-label col-md-5" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Heading, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Heading, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Subheading, htmlAttributes: new { @class = "control-label col-md-5" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Subheading, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Subheading, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ButtonText, htmlAttributes: new { @class = "control-label col-md-5" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ButtonText, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ButtonText, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.url, htmlAttributes: new { @class = "control-label col-md-5" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.url, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.url, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-lg-4 col-md-8 col-12">
                        <label for="exampleFormControlInput1">Image <small class="text-danger">* required</small></label>
                        <br />
                        <input name="Image" id="Image" hidden />
                        <input type="hidden" name="CreatedBy" class="CreatedBy">
                        <input id="imageUpload" type="file" name="ImageOne" accept="image/*" class="form-control-file">
                        <br />
                        <img id="PlaceImage" alt="" src="@imageurl" style="width: 20%; margin-top: 5px;" />
                        <span class="ImageMessage" style="color:red;"></span>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2">
                            <input type="submit" value="Create" class="btn btn-primary px-4 py-2 text-white" />
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</div>
<script>
    $("#imageUpload").change(function () {
        var checkimg = true;
        if (checkimg == true) {
            var element = this;
            var formData = new FormData();
            var totlaFiles = element.files.length;
            for (var i = 0; i < totlaFiles; i++) {
                var file = element.files[i];
                formData.append("Photo", file)
            }
            $.ajax({
                type: 'POST',
                url: '@Url.Action("UploadImage", "Image")',
                data: formData,
                dataType: 'json',
                contentType: false,
                processData: false
            })
                .done(function (response) {
                    if (response.Success == true) {
                        $("#Image").val(response.ImageURL);
                        $("#PlaceImage").attr("src", response.ImageURL);
                    }
                })
                .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Something went wrong!',
                    })
                });
        }
        else {
            alert
            $(".ImageMessage").html("Image size should be less then 100Kb");
        }
    });
    //function check() {
    //    var imgpath = document.getElementById('imageUpload');
    //    if (!imgpath.value == "") {
    //        var img = imgpath.files[0].size;
    //        var imgsize = img / 1024;
    //        if (imgsize > 101) {
    //            return false;
    //        }
    //        else {
    //            return true;
    //        }
    //    }
    //}
</script>



